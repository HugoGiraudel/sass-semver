@import 'true';
@import '../src/index';

@include test-module('sass-semver') {

  @include test('clean(..)') {
    $test: clean('v1.2.3');
    $expect: '1.2.3';
    @include assert-equal($test, $expect, 'Gets rid off the leading `v`.');

    $test: clean('=1.2.3');
    $expect: '1.2.3';
    @include assert-equal($test, $expect, 'Gets rid off the leading `=`.');
  }

  @include test('valid(..)') {
    $test: valid('1.2.3');
    $expect: true;
    @include assert-equal($test, $expect, 'Returns if version is valid.');

    $test: valid('1.2.3-alpha');
    $expect: true;
    @include assert-equal($test, $expect, 'Returns if version is valid.');

    $test: valid('1.2.3-alpha.0');
    $expect: true;
    @include assert-equal($test, $expect, 'Returns if version is valid.');

    $test: valid('a.b.c');
    $expect: false;
    @include assert-equal($test, $expect, 'Returns if version is valid.');

    $test: valid('1.2.3.5');
    $expect: false;
    @include assert-equal($test, $expect, 'Returns if version is valid.');

    $test: valid('foobar');
    $expect: false;
    @include assert-equal($test, $expect, 'Returns if version is valid.');
  }

  @include test('inc(..)') {
    $test: inc('1.2.3', 'major');
    $expect: '2.0.0';
    @include assert-equal($test, $expect, 'Increments a version.');

    $test: inc('1.2.3', 'minor');
    $expect: '1.3.0';
    @include assert-equal($test, $expect, 'Increments a version.');

    $test: inc('1.2.3', 'patch');
    $expect: '1.2.4';
    @include assert-equal($test, $expect, 'Increments a version.');

    $test: inc('1.2.3', 'prerelease');
    $expect: '1.2.3-beta.0';
    @include assert-equal($test, $expect, 'Increments a version.');

    $test: inc('1.2.3', 'prerelease', 'foobar');
    $expect: '1.2.3-foobar.0';
    @include assert-equal($test, $expect, 'Increments a version.');

    $test: inc('1.2.3-foobar.0', 'prerelease');
    $expect: '1.2.3-foobar.1';
    @include assert-equal($test, $expect, 'Increments a version.');

    $test: inc('1.2.3', 'premajor');
    $expect: '2.0.0-beta.0';
    @include assert-equal($test, $expect, 'Increments a version.');

    $test: inc('1.2.3', 'preminor');
    $expect: '1.3.0-beta.0';
    @include assert-equal($test, $expect, 'Increments a version.');

    $test: inc('1.2.3', 'prepatch');
    $expect: '1.2.4-beta.0';
    @include assert-equal($test, $expect, 'Increments a version.');
  }

  @include test('major(..)') {
    $test: major('1.2.3');
    $expect: 1;
    @include assert-equal($test, $expect, 'Returns the major component of a version.');

    $test: major('10.2.3');
    $expect: 10;
    @include assert-equal($test, $expect, 'Returns the major component of a version.');
  }

  @include test('minor(..)') {
    $test: minor('1.2.3');
    $expect: 2;
    @include assert-equal($test, $expect, 'Returns the minor component of a version.');

    $test: minor('1.20.3');
    $expect: 20;
    @include assert-equal($test, $expect, 'Returns the minor component of a version.');
  }

  @include test('patch(..)') {
    $test: patch('1.2.3');
    $expect: 3;
    @include assert-equal($test, $expect, 'Returns the patch component of a version.');

    $test: patch('1.2.30');
    $expect: 30;
    @include assert-equal($test, $expect, 'Returns the patch component of a version.');
  }

  @include test('gt(..)') {
    $test: gt('1.2.3', '3.2.1');
    $expect: false;
    @include assert-equal($test, $expect, 'Returns whether v1 is greater than v2');

    $test: gt('1.2.3', '1.2.3');
    $expect: false;
    @include assert-equal($test, $expect, 'Returns whether v1 is greater than v2');

    $test: gt('1.2.3', '0.1.2');
    $expect: true;
    @include assert-equal($test, $expect, 'Returns whether v1 is greater than v2');
  }

  @include test('gte(..)') {
    $test: gte('1.2.3', '3.2.1');
    $expect: false;
    @include assert-equal($test, $expect, 'Returns whether v1 is greater than or equal to v2');

    $test: gte('1.2.3', '1.2.3');
    $expect: true;
    @include assert-equal($test, $expect, 'Returns whether v1 is greater than or equal to v2');

    $test: gte('1.2.3', '0.1.2');
    $expect: true;
    @include assert-equal($test, $expect, 'Returns whether v1 is greater than or equal to v2');
  }

  @include test('lt(..)') {
    $test: lt('1.2.3', '3.2.1');
    $expect: true;
    @include assert-equal($test, $expect, 'Returns whether v1 is letter than v2');

    $test: lt('1.2.3', '1.2.3');
    $expect: false;
    @include assert-equal($test, $expect, 'Returns whether v1 is letter than v2');

    $test: lt('1.2.3', '0.1.2');
    $expect: false;
    @include assert-equal($test, $expect, 'Returns whether v1 is letter than v2');
  }

  @include test('lte(..)') {
    $test: lte('1.2.3', '3.2.1');
    $expect: true;
    @include assert-equal($test, $expect, 'Returns whether v1 is letter than or equal to v2');

    $test: lte('1.2.3', '1.2.3');
    $expect: true;
    @include assert-equal($test, $expect, 'Returns whether v1 is letter than or equal to v2');

    $test: lte('1.2.3', '0.1.2');
    $expect: false;
    @include assert-equal($test, $expect, 'Returns whether v1 is letter than or equal to v2');
  }

  @include test('eq(..)') {
    $test: eq('1.2.3', '3.2.1');
    $expect: false;
    @include assert-equal($test, $expect, 'Returns whether v1 is equal to v2');

    $test: eq('1.2.3', '1.2.3');
    $expect: true;
    @include assert-equal($test, $expect, 'Returns whether v1 is equal to v2');
  }

  @include test('neq(..)') {
    $test: neq('1.2.3', '3.2.1');
    $expect: true;
    @include assert-equal($test, $expect, 'Returns whether v1 is different from v2');

    $test: neq('1.2.3', '1.2.3');
    $expect: false;
    @include assert-equal($test, $expect, 'Returns whether v1 is different from v2');
  }

  @include test('cmp(..)') {
    $test: cmp('1.2.3', '==', '0.1.2');
    $expect: false;
    @include assert-equal($test, $expect, 'Compare both versions.');

    $test: cmp('1.2.3', '===', '0.1.2');
    $expect: false;
    @include assert-equal($test, $expect, 'Compare both versions.');

    $test: cmp('1.2.3', '>', '0.1.2');
    $expect: true;
    @include assert-equal($test, $expect, 'Compare both versions.');

    $test: cmp('1.2.3', '>=', '0.1.2');
    $expect: true;
    @include assert-equal($test, $expect, 'Compare both versions.');

    $test: cmp('1.2.3', '!=', '0.1.2');
    $expect: true;
    @include assert-equal($test, $expect, 'Compare both versions.');

    $test: cmp('1.2.3', '!==', '0.1.2');
    $expect: true;
    @include assert-equal($test, $expect, 'Compare both versions.');

    $test: cmp('1.2.3', '<', '0.1.2');
    $expect: false;
    @include assert-equal($test, $expect, 'Compare both versions.');

    $test: cmp('1.2.3', '<=', '0.1.2');
    $expect: false;
    @include assert-equal($test, $expect, 'Compare both versions.');
  }

  @include test('_to-number(..)') {
    $test: _to-number('0');
    $expect: 0;
    @include assert-equal($test, $expect, 'Convert a string to a number.');

    $test: _to-number('300');
    $expect: 300;
    @include assert-equal($test, $expect, 'Convert a string to a number.');

    $test: _to-number('a');
    $expect: false;
    @include assert-equal($test, $expect, 'Convert a string to a number.');
  }

  @include test('_prerelease(..)') {
    $test: _prerelease('1.2.3');
    $expect: ('name': null, 'number': -1);
    @include assert-equal($test, $expect, 'Parse the prerelease of a version.');

    $test: _prerelease('1.2.3.alpha.0');
    $expect: ('name': 'alpha', 'number': 0);
    @include assert-equal($test, $expect, 'Parse the prerelease of a version.');
  }

}
