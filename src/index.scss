// Casts a string into a number (integer only)
// @access private
// @param {String} $value - Value to be parsed
// @return {Number}
// @author @HugoGiraudel - Simplified by @kaelig to only convert unsigned integers
// @link http://hugogiraudel.com/2014/01/15/sass-string-to-number/
@function _to-number($value) {
  $result: 0;
  $digits: 0;
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from 1 through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not map-get($numbers, $character) {
      @return false;
    }

    @if ($digits == 0) {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return $result;
}

/// Parse the prerelease of $version
/// @access private
/// @param {String} $version
/// @return {Map}
/// @example scss
///   $prerelease: _prerelease('1.2.3');
///    -> ( 'name': null, 'number': -1 )
///   $prerelease: _prerelease('1.2.3-alpha.0');
///    -> ( 'name': 'alpha', 'number': 0 )
@function _prerelease($version) {
  @if str-length($version) < 7 {
    @return (
      'name': null,
      'number': -1
    );
  }

  $prerelease: str-slice($version, 7);

  @return (
    'name': str-slice($prerelease, 1, str-index($prerelease, '.') - 1),
    'number': _to-number(str-slice($prerelease, -1))
  );
}


/// Remove leading `v` or `=` from $version
/// @param {String} $version
/// @return {String}
/// @example scss
///   $version: clean('v1.2.3');
///   -> '1.2.3'
@function clean($version) {
  @if index('v' '=', str-slice($version, 1, 1)) {
    @return str-slice($version, 2);
  }

  @return $version;
}

/// Return whether $version is valid SemVer
/// @param {String} $version
/// @return {Boolean}
/// @example scss
///   $valid: valid('1.2.3');
///   -> true
///   $not-valid: valid('a.b.c');
///   -> false
@function valid($version) {
  @return str-index($version, '.') != null and
    type-of(major($version)) == 'number' and
    type-of(minor($version)) == 'number' and
    type-of(patch($version)) == 'number';
}

/// Return the version incremented by the release type (major, minor, patch, prerelease)
/// @param {String} $version
/// @param {String} $release - Type of release to bump (major, minor, patch, prerelease)
/// @return {String}
/// @example scss
///   $version: inc('1.2.3', 'major');
///   -> '2.0.0'
///   $version: inc('1.2.3', 'minor');
///   -> '1.3.0'
///   $version: inc('1.2.3', 'patch');
///   -> '1.2.4'
///   $version: inc('1.2.3', 'prerelease');
///   -> '1.2.3-beta.0'
///   $version: inc('1.2.3', 'prerelease', 'foobar');
///   -> '1.2.3-foobar.0'
///   $version: inc('1.2.3-foobar.0', 'prerelease');
///   -> '1.2.3-foobar.1'
///   $version: inc('1.2.3', 'premajor');
///   -> '2.0.0-beta.0'
///   $version: inc('1.2.3', 'preminor');
///   -> '1.3.0-beta.0'
///   $version: inc('1.2.3', 'prepatch');
///   -> '1.2.4-beta.0'
@function inc($version, $release, $prerelease: 'beta') {
  $release: to-lower-case($release);
  $major: major($version);
  $minor: minor($version);
  $patch: patch($version);

  @if ($release == 'major' or $release == 'premajor') {
    $major: $major + 1;
    $minor: 0;
    $patch: 0;
  }

  @if ($release == 'minor' or $release == 'preminor') {
    $minor: $minor + 1;
    $patch: 0;
  }

  @if ($release == 'patch' or $release == 'prepatch') {
    $patch: $patch + 1;
  }

  $incremented-version: $major + '.' + $minor + '.' + $patch;

  @if (str-slice($release, 1, 3) == 'pre') {
    $prerelease-data: _prerelease($version);
    $incremented-version: $incremented-version + '-' +
      (map-get($prerelease-data, 'name') or $prerelease) + '.' +
      (map-get($prerelease-data, 'number') + 1);
  }

  @return $incremented-version;
}

/// Return the major version number
/// @param {String} $version
/// @return {Number}
/// @example scss
///   $major: major('1.2.3');
///   -> 1
@function major($version) {
  @return _to-number(str-slice($version, 1, str-index($version, '.') - 1));
}

/// Return the minor version number
/// @param {String} $version
/// @return {Number}
/// @example scss
///   $minor: minor('1.2.3');
///   -> 2
@function minor($version) {
  $first-dot-index: str-index($version, '.');
  $chunk: str-slice($version, $first-dot-index + 1);
  @return _to-number(str-slice($chunk, 1, str-index($chunk, '.') - 1));
}

/// Return the patch version number
/// @param {String} $version
/// @return {Number}
/// @example scss
///   $patch: patch('1.2.3');
///   -> 3
@function patch($version) {
  $first-chunk: str-slice($version, str-index($version, '.') + 1);
  $second-chunk: str-slice($first-chunk, str-index($first-chunk, '.') + 1);
  $end: if(str-length($second-chunk) > 1, (str-index($second-chunk, '-') or 0) - 1, 1);
  @return _to-number(str-slice($second-chunk, 1, $end));
}

/// Return whether the first version is greater than the second
/// @param {String} $v1
/// @param {String} $v2
/// @return {Boolean}
/// @example scss
///   $gt: gt('1.2.3', '3.2.1');
///   -> false
///   $gt: gt('1.2.3', '1.2.3');
///   -> false
///   $gt: gt('1.2.3', '0.1.2');
///   -> true
@function gt($v1, $v2) {
  @if $v1 == $v2 {
    @return false;
  }

  $major-v1: major($v1);
  $major-v2: major($v2);
  $minor-v1: minor($v1);
  $minor-v2: minor($v2);

  @return ($major-v1 > $major-v2)
    or ($major-v1 == $major-v2 and $minor-v1 > $minor-v2)
    or ($major-v1 == $major-v2 and $minor-v1 == $minor-v2 and patch($v1) > patch($v2));
}

/// Return whether the first version is equal to the second
/// @param {String} $v1
/// @param {String} $v2
/// @return {Boolean}
/// @example scss
///   $eq: eq('1.2.3', '3.2.1');
///   -> false
///   $eq: eq('1.2.3', '1.2.3');
///   -> true
///   $eq: eq('1.2.3', '0.1.2');
///   -> false
@function eq($v1, $v2) {
  @return $v1 == $v2;
}

/// Return whether the first version is lesser than the second
/// @param {String} $v1
/// @param {String} $v2
/// @return {Boolean}
/// @example scss
///   $lt: lt('1.2.3', '3.2.1');
///   -> true
///   $lt: lt('1.2.3', '1.2.3');
///   -> false
///   $lt: lt('1.2.3', '0.1.2');
///   -> false
@function lt($v1, $v2) {
  @return $v1 != $v2 and not gt($v1, $v2);
}

/// Return whether the first version is greater than or equal to the second
/// @param {String} $v1
/// @param {String} $v2
/// @return {Boolean}
/// @example scss
///   $gte: gte('1.2.3', '3.2.1');
///   -> false
///   $gte: gte('1.2.3', '1.2.3');
///   -> true
///   $gte: gte('1.2.3', '0.1.2');
///   -> true
@function gte($v1, $v2) {
  @return $v1 == $v2 or gt($v1, $v2);
}

/// Return whether the first version is lesser than or equal to the second
/// @param {String} $v1
/// @param {String} $v2
/// @return {Boolean}
/// @example scss
///   $lte: lte('1.2.3', '3.2.1');
///   -> true
///   $lte: lte('1.2.3', '1.2.3');
///   -> true
///   $lte: lte('1.2.3', '0.1.2');
///   -> false
@function lte($v1, $v2) {
  @return $v1 == $v2 or lt($v1, $v2);
}

/// Return whether the first version is not equal to the second
/// @param {String} $v1
/// @param {String} $v2
/// @return {Boolean}
/// @example scss
///   $eq: eq('1.2.3', '3.2.1');
///   -> true
///   $eq: eq('1.2.3', '1.2.3');
///   -> false
///   $eq: eq('1.2.3', '0.1.2');
///   -> true
@function neq($v1, $v2) {
  @return $v1 != $v2;
}

/// Pass in a comparison string, and it will call the corresponding function.
/// @param {String} $v1
/// @param {String} $comparator
/// @param {String} $v2
/// @return {Boolean}
/// @example scss
///   $cmp: cmp('1.2.3', '==', '0.1.2');
///   -> false
///   $cmp: cmp('1.2.3', '===', '0.1.2');
///   -> false
///   $cmp: cmp('1.2.3', '>', '0.1.2');
///   -> true
///   $cmp: cmp('1.2.3', '>=', '0.1.2');
///   -> true
///   $cmp: cmp('1.2.3', '!=', '0.1.2');
///   -> true
///   $cmp: cmp('1.2.3', '!==', '0.1.2');
///   -> true
///   $cmp: cmp('1.2.3', '<', '0.1.2');
///   -> false
///   $cmp: cmp('1.2.3', '<=', '0.1.2');
///   -> false
@function cmp($v1, $comparator, $v2) {
  $mapping: (
    '==': 'eq',
    '===': 'eq',
    '!=': 'neq',
    '!==': 'neq',
    '>': 'gt',
    '>=': 'gte',
    '<': 'lt',
    '<=': 'lte',
  );

  @return call(map-get($mapping, $comparator), $v1, $v2);
}
